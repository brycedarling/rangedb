package main

import (
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path"
	"strings"
	"text/template"
	"time"

	"github.com/inklabs/rangedb/pkg/eventparser"
)

func main() {
	pkg := flag.String("package", "", "package")
	id := flag.String("id", "", "id")
	aggregateType := flag.String("aggregateType", "", "stream identifier")
	inFilePath := flag.String("inFile", "", "input filename containing structs")
	outFilePath := flag.String("outFile", "", "output filename containing generated struct methods")
	flag.Parse()

	file, err := os.Open(*inFilePath)
	if err != nil {
		log.Fatalf("unable to open (%s): %v", *inFilePath, err)
	}

	if *outFilePath == "" {
		fileName := strings.TrimSuffix(*inFilePath, path.Ext(*inFilePath))
		*outFilePath = fmt.Sprintf("%s_gen.go", fileName)
	}

	events, err := eventparser.GetEvents(file)
	if err != nil {
		log.Fatalf("unable to extract events: %v", err)
	}

	_ = file.Close()

	outFile, err := os.Create(*outFilePath)
	if err != nil {
		log.Fatalf("unable to create events file: %v", err)
	}

	err = writeEvents(*pkg, *id, *aggregateType, events, outFile)
	if err != nil {
		log.Fatalf("unable to write to events file: %v", err)
	}

	_ = outFile.Close()
}

func writeEvents(pkg, id, aggregateType string, events []eventparser.ParsedEvent, file io.Writer) error {
	containsPersonalData := false
	containsSerializedData := false
	for _, event := range events {
		if event.PersonalData != nil {
			if event.PersonalData.SerializedFields != nil {
				containsSerializedData = true
			}
			containsPersonalData = true
		}
	}
	return fileTemplate.Execute(file, templateData{
		Timestamp:              time.Now(),
		Events:                 events,
		AggregateType:          aggregateType,
		ID:                     id,
		Package:                pkg,
		ContainsPersonalData:   containsPersonalData,
		ContainsSerializedData: containsSerializedData,
	})
}

type templateData struct {
	Timestamp              time.Time
	Events                 []eventparser.ParsedEvent
	AggregateType          string
	ID                     string
	Package                string
	ContainsPersonalData   bool
	ContainsSerializedData bool
}

var fileTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// {{ .Timestamp }}
package {{ $.Package }}

{{- if .ContainsPersonalData }}

import (
	{{- if .ContainsSerializedData }}
	"strconv"
	{{ end }}
	"github.com/inklabs/rangedb/pkg/crypto"
)
{{- end }}
{{ range .Events }}
func (e {{ .Name }}) AggregateID() string { return e.{{ $.ID }} }
func (e {{ .Name }}) AggregateType() string { return "{{ $.AggregateType }}" }
func (e {{ .Name }}) EventType() string { return "{{ .Name }}" }

{{- if .PersonalData }}
{{- $event := . }}
func (e *{{ .Name }}) Encrypt(encryptor crypto.Encryptor) error {
	var err error
{{- range $event.PersonalData.Fields }}
	e.{{ . }}, err = encryptor.Encrypt(e.{{ $event.PersonalData.SubjectID }}, e.{{ . }})
	if err != nil {
		return err
	}
{{ end }}
{{- range $key, $value := $event.PersonalData.SerializedFields }}
	string{{ $value }} := strconv.Itoa(e.{{ $value }})
	e.{{ $key }}, err = encryptor.Encrypt(e.{{ $event.PersonalData.SubjectID }}, string{{ $value }})
	if err != nil {
		return err
	}
	e.{{ $value }} = 0
{{ end }}
	return nil
}
func (e *{{ .Name }}) Decrypt(encryptor crypto.Encryptor) error {
	var err error{{ range $event.PersonalData.Fields }}
	e.{{ . }}, err = encryptor.Decrypt(e.{{ $event.PersonalData.SubjectID }}, e.{{ . }})
	if err != nil {
		{{- range $event.PersonalData.Fields }}
		e.{{ . }} = ""
		{{- end }}
		return err
	}
{{ end }}
{{- range $key, $value := $event.PersonalData.SerializedFields }}
	decrypted{{ $value }}, err := encryptor.Decrypt(e.{{ $event.PersonalData.SubjectID }}, e.{{ $key }})
	if err != nil {
		{{- range $k, $v := $event.PersonalData.SerializedFields }}
		e.{{ $v }} = 0
		{{- end }}
		return err
	}
	e.{{ $value }}, err = strconv.Atoi(decrypted{{ $value }})
	if err != nil {
		{{- range $k, $v := $event.PersonalData.SerializedFields }}
		e.{{ $v }} = 0
		{{- end }}
		return err
	}
	e.{{ $key }} = ""
{{ end }}
	return nil
}
{{ end }}
{{ end }}`))
